package com.example.fruitninja;

        import android.annotation.SuppressLint;
        import android.content.Context;
        import android.content.Intent;
        import android.graphics.Bitmap;
        import android.graphics.BitmapFactory;
        import android.graphics.Canvas;
        import android.graphics.Color;
        import android.graphics.Matrix;
        import android.graphics.PorterDuff;
        import android.graphics.drawable.Drawable;
        import android.os.Handler;
        import android.view.MotionEvent;
        import android.view.SurfaceHolder;
        import android.view.SurfaceView;
        import android.view.animation.Animation;
        import android.view.animation.AnimationUtils;
        import android.widget.TextView;
        import android.widget.Toast;

        import java.util.Iterator;
        import java.util.Random;
        import java.util.logging.LogRecord;

        import static com.example.fruitninja.R.drawable.*;

public class DrawSurfaceView extends SurfaceView implements Runnable {
    int interval = 1;
    Context context;
    SurfaceHolder holder;
    boolean threadRunning = true;
    boolean isRunning = true;
    Random rnd = new Random();
    int count = 0, count2 = 4000;
    float startX, x, y, maxY, endX, midX, a, p, q, length;
    boolean leftToRight, falling;
    int i = 0;
    int n, rndnum = rnd.nextInt((2300-1000)+1)+1000, time = 1500;
    static Node<Bitmap> bitmapNode, firstBitmap;
    static Node<Fruit> fruit, firstFruit, fruit2, firstFruit2;
    static Node<String> fruitString, firstFruitString;
    static boolean gameOver = false;
    Canvas c;

    public void start()
    {
        Random random=new Random();
        startX= random.nextInt((1500 - 300) + 1) + 300;
        length = random.nextInt(1200);
        endX = startX + length;
        switch (random.nextInt(2)){
            case 0:
                leftToRight=true;
                x=startX;
                break;
            case 1:
                leftToRight=false;
                x=endX;
                break;
        }
        y=900;
        midX=(startX+endX)/2;
        maxY= rnd.nextInt((300 - 100) + 1) + 100;
        q=-startX-endX;
        p=startX*endX;
        a=(900-maxY)/((midX*midX)+(q*midX)+(p));
        falling=false;
    }

    public void createNewBitmaps()
    {
        fruit = fruit.getLast(fruit);
        bitmapNode = bitmapNode.getLast(bitmapNode);
        fruitString = fruitString.getLast(fruitString);
        fruit2 = fruit2.getLast(fruit2);

        start();
        n = rnd.nextInt(5);
        bitmapNode.SetNext(new Node(returnBitmap(n)));
        bitmapNode = bitmapNode.GetNext();
        fruit.SetNext(new Node(new Fruit(startX, endX, x, y, midX, maxY, a, p, q, length, leftToRight)));
        fruit = fruit.GetNext();
        fruit2.SetNext(new Node(new Fruit(startX, endX, x, maxY, midX, maxY, a, p, q, length, leftToRight)));
        fruit2 = fruit2.GetNext();
        fruitString.SetNext(new Node(returnFruit(n)));
        fruitString = fruitString.GetNext();
        i++;

        //start2(fruit.GetValue().getX(), fruit.GetValue().getY());
        //start();
        //fruit2.SetNext(new Node(new Fruit(startX, endX, x, y,
                //midX, maxY, a, p, q, length, leftToRight)));
        //fruit2 = fruit2.GetNext();
    }

    public DrawSurfaceView(Context context)
    {
        super(context);
        this.context = context;
        holder = getHolder();

        timer();
        gameOver = false;
        start();
        n = rnd.nextInt(5);
        bitmapNode = new Node(returnBitmap(n));
        firstBitmap = bitmapNode;
        fruit = new Node(new Fruit(startX, endX, x, y, midX, maxY, a, p, q, length, leftToRight));
        firstFruit = fruit;
        fruit2 = new Node(new Fruit(startX, endX, x, maxY, midX, 900, a, p, q, length, leftToRight));
        firstFruit2 = fruit2;
        fruitString = new Node(returnFruit(n));
        firstFruitString = fruitString;

        /*start();
        fruit2 = new Node(new Node(new Fruit(startX, endX, x, y,
                midX, maxY, a, p, q, length, leftToRight)));
        firstFruit2 = fruit2;*/
    }

    public Bitmap returnBitmap(int n)
    {
        Bitmap bitmap = null;
        if (n == 0) {
            bitmap = BitmapFactory.decodeResource(getResources(), watermelon_full);
        }
        if (n == 1) {
            bitmap = BitmapFactory.decodeResource(getResources(), orange_full);
        }
        if (n == 2) {
            bitmap = BitmapFactory.decodeResource(getResources(), banana_full);
        }
        if (n == 3) {
            bitmap = BitmapFactory.decodeResource(getResources(), apple_full);
        }
        if (n == 4) {
            bitmap = BitmapFactory.decodeResource(getResources(), bomb);
        }
        return bitmap;
    }

    public String returnFruit(int n)
    {
        String s = null;
        if (n == 0) {
            s = "watermelon";
        }
        if (n == 1) {
            s = "orange";
        }
        if (n == 2) {
            s = "banana";
        }
        if (n == 3) {
            s = "apple";
        }
        if (n == 4) {
            s = "bomb";
        }
        return s;
    }

    @Override
    public void run() {
        while (threadRunning)
        {
            if(isRunning)
            {
                if(!holder.getSurface().isValid())
                    continue;

                c = null;
                try
                {
                    c = this.getHolder().lockCanvas();
                    synchronized (this.getHolder()){
                        c.drawRGB(224,242,244);

                        if (count >= 4000)
                        {
                            if (count > count2+time && count < count2+time+30)
                            {
                                fruit = firstFruit;
                                bitmapNode = firstBitmap;
                                fruitString = firstFruitString;
                                fruit2 = firstFruit2;
                                createNewBitmaps();
                            }
                            if (count > count2+time+30 && count < count2+time+60)
                            {
                                count2 = count2 + time + 60;
                            }

                            fruit = firstFruit;
                            bitmapNode = firstBitmap;
                            fruitString = firstFruitString;
                            fruit2 = firstFruit2;

                            //deleteBitmaps(firstFruit, firstBitmap, firstFruitString);

                            for (int i=0; i<firstFruit.getLength(firstFruit); i++)
                            {
                                if (fruit.GetValue().getY() < 1000)
                                {
                                    ///bitmapNode.SetValue(RotateBitmap(bitmapNode.GetValue()));
                                    c.drawBitmap(bitmapNode.GetValue(), fruit.GetValue().getX(),
                                            fruit.GetValue().getY(),null);
                                }

                                if (fruit.GetValue().sliced == true)
                                {
                                    if (fruit.GetValue().getY() < 1000)
                                    {
                                        c.drawBitmap(returnHalfBitmap2(fruitString), fruit.GetValue().getX()+100,
                                                fruit.GetValue().getY()+100,null);
                                    }
                                }

                                bitmapNode = bitmapNode.GetNext();
                                fruit = fruit.GetNext();
                                fruitString = fruitString.GetNext();
                                fruit2 = fruit2.GetNext();
                            }
                            fruit = firstFruit;
                            bitmapNode = firstBitmap;
                            fruitString = firstFruitString;
                            fruit2 = firstFruit2;
                            automaticMove(c);
                        }
                    }
                    Thread.sleep(interval);
                }
                catch (Exception e)
                {

                }
                finally {
                    if(c!=null)
                    {
                        this.getHolder().unlockCanvasAndPost(c);
                    }
                }
            }
        }
    }

    public void timer()
    {
        Thread t = new Thread()
        {
            @Override
            public void run()
            {
                while (!isInterrupted())
                {
                    try
                    {
                        Thread.sleep(1);
                        runOnUiThread(new Runnable()
                        {
                            @Override
                            public void run()
                            {
                            }
                        });
                    }
                    catch (InterruptedException e)
                    {
                        e.printStackTrace();
                    }
                    count++;
                }
            }

            private void runOnUiThread(Runnable runnable) {
            }
        };
        t.start();
    }

    public void move()
    {
        fruit.GetValue().setY(fruit.GetValue().getY() + 10);
    }

    public static Bitmap RotateBitmap(Bitmap source, float angle)
    {
        Matrix matrix = new Matrix();
        matrix.postRotate(angle);

        return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(), matrix, true);
    }

    public void automaticMove(Canvas c)
    {
        while (gameOver == false)
        {
            for (int h=0; h<firstFruit.getLength(firstFruit); h++)
            {
                if (!fruit.GetValue().sliced)
                {
                    if(fruit.GetValue().getX()==fruit.GetValue().getMidX()){
                        fruit.GetValue().setFalling(true);
                    }
                    fruit.GetValue().setY(900- (fruit.GetValue().getA()*fruit.GetValue().getX()*fruit.GetValue().getX()+
                            fruit.GetValue().getA()*fruit.GetValue().getQ()*fruit.GetValue().getX() +
                            fruit.GetValue().getA()*fruit.GetValue().getP()));

                    if(fruit.GetValue().isLeftToRight()){
                        fruit.GetValue().setX(fruit.GetValue().getX() + 3);
                        //bitmapNode.SetValue(RotateBitmap(bitmapNode.GetValue(), 1));
                    }
                    else {
                        fruit.GetValue().setX(fruit.GetValue().getX() - 3);
                        //bitmapNode.SetValue(RotateBitmap(bitmapNode.GetValue(), -1));
                    }
                }
                else
                {
                    fruit.GetValue().setFalling(true);
                    fruit2.GetValue().setFalling(true);
                    if (fruitString.GetValue() == "bomb")
                    {
                        gameOver = true;
                    }
                    else
                    {
                        bitmapNode.SetValue(returnHalfBitmap1(fruitString));
                        fruit.GetValue().setY(900- (fruit.GetValue().getA()*fruit.GetValue().getX()*
                                fruit.GetValue().getX()+ fruit.GetValue().getA()*fruit.GetValue().getQ()*
                                fruit.GetValue().getX() + fruit.GetValue().getA()*fruit.GetValue().getP()));
                        fruit.GetValue().setX(fruit.GetValue().getX() + 10);
                        fruit2.GetValue().setY(fruit2.GetValue().getY() + 20);
                    }
                }
                if (MainActivity.numOfLosses(firstFruit, firstFruitString) == 3)
                {
                    gameOver = true;
                }
                fruit = fruit.GetNext();
                bitmapNode = bitmapNode.GetNext();
                fruitString = fruitString.GetNext();
                fruit2 = fruit2.GetNext();
            }
        }
    }

    public Bitmap returnHalfBitmap1(Node<String> fruitString)
    {
        if (fruitString.GetValue() == "watermelon") {
            return BitmapFactory.decodeResource(getResources(), watermelon_half1);
        }
        if (fruitString.GetValue() == "orange") {
            return BitmapFactory.decodeResource(getResources(), orange_half1);
        }
        if (fruitString.GetValue() == "banana") {
            return BitmapFactory.decodeResource(getResources(), banana_half1);
        }
        if (fruitString.GetValue() == "apple") {
            return BitmapFactory.decodeResource(getResources(), apple_half1);
        }
        if (fruitString.GetValue() == "bomb") {
            return BitmapFactory.decodeResource(getResources(), explotion);
        }

       return null;
    }

    public Bitmap returnHalfBitmap2(Node<String> fruitString)
    {
        if (fruitString.GetValue() == "watermelon") {
            return BitmapFactory.decodeResource(getResources(), watermelon_half2);
        }
        if (fruitString.GetValue() == "orange") {
            return BitmapFactory.decodeResource(getResources(), orange_half2);
        }
        if (fruitString.GetValue() == "banana") {
            return BitmapFactory.decodeResource(getResources(), banana_half2);
        }
        if (fruitString.GetValue() == "apple") {
            return BitmapFactory.decodeResource(getResources(), apple_half2);
        }
        if (fruitString.GetValue() == "bomb") {
            return BitmapFactory.decodeResource(getResources(), explotion);
        }

        return null;
    }

    public void deleteBitmaps(Node<Fruit> fruitNode, Node<Bitmap> bitmapNode, Node<String> fruitString)
    {
        Node<Fruit> first = fruitNode;
        Node<Fruit> p = fruitNode;
        Node<Bitmap> p2 = bitmapNode;
        Node<String> p3 = fruitString;

        for (int i=0; i<p.getLength(p); i++)
        {
            if (p.GetValue().getY() > 500)
            {
                if (i == 0)
                {
                    p = p.GetNext();
                    //p.SetNext(null);
                    fruitNode = p;

                    p2 = p2.GetNext();
                    //p2.SetNext(null);
                    bitmapNode = p2;

                    p3 = p3.GetNext();
                    //p3.SetNext(null);
                    fruitString = p3;
                }
                else
                {
                    Node<Fruit> prev = fruitNode;
                    while (prev.GetNext() != p)
                        prev = prev.GetNext();
                    p.SetNext(prev.GetNext());
                    prev.SetNext(null);

                    Node<Bitmap> prev2 = bitmapNode;
                    while (prev2.GetNext() != p2)
                        prev2 = prev2.GetNext();
                    p2.SetNext(prev2.GetNext());
                    prev2.SetNext(null);

                    Node<String> prev3 = fruitString;
                    while (prev3.GetNext() != p3)
                        prev3 = prev3.GetNext();
                    p3.SetNext(prev3.GetNext());
                    prev3.SetNext(null);
                }
            }
            p = p.GetNext();
            p2 = p2.GetNext();
            p3 = p3.GetNext();
        }
    }


}
