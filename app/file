@Override
    public void run() {
        while (threadRunning)
        {
            if(isRunning)
            {
                if(!holder.getSurface().isValid())
                    continue;

                Canvas c = null;
                try
                {
                    c = this.getHolder().lockCanvas();
                    synchronized (this.getHolder()){
                        c.drawRGB(250,208,147);

                        if (count >= 4000)
                        {
                            if (count < 14000)
                            {
                                /*handler.postDelayed(new Runnable() {
                                    public void run() {
                                        if (count > count2 && count < count2+20)
                                        {
                                            fruit = firstFruit;
                                            bitmapNode = firstBitmap;
                                            fruitString = firstFruitString;
                                            fruit2 = firstFruit2;
                                            createNewBitmaps();
                                        }
                                        count2 = count2 + delay + 40;
                                        handler.postDelayed(this, delay);
                                    }
                                }, delay);*/
                                //if (count > count2+rndnum && count < count2+rndnum+20)
                                //if (count >= count2 + time)
                                //{
                                    if (count > count2+time && count < count2+time+20)
                                    {
                                        //rndnum = rnd.nextInt((3 - 2) + 1) + 2;
                                        fruit = firstFruit;
                                        bitmapNode = firstBitmap;
                                        fruitString = firstFruitString;
                                        fruit2 = firstFruit2;
                                        createNewBitmaps();
                                    }
                                //}
                                count2 = count2 + time + 20;
                                if (count > count2+time+20 && count < count2+time+40)
                                {
                                    count2 = count2 + 40;
                                    rndnum = rnd.nextInt((1800-800)+1)+800;
                                }
                            }
                            time = 1700;
                            count2 = 14000;
                            if (count >= 14000 && count < 24000)
                            {
                                if (count > count2+time && count < count2+time+20)
                                {
                                    rndnum = rnd.nextInt((3 - 2) + 1) + 2;
                                    for (int i=0; i<rndnum; i++)
                                    {
                                        fruit = firstFruit;
                                        bitmapNode = firstBitmap;
                                        fruitString = firstFruitString;
                                        fruit2 = firstFruit2;
                                        createNewBitmaps();
                                    }
                                }
                                count2 = count2 + time + 20;
                            }
                            time = 1500;
                            count2 = 24000;
                            if (count >= 24000 && count < 50000)
                            {
                                if (count > count2+time && count < count2+time+20)
                                {
                                    rndnum = rnd.nextInt((4 - 3) + 1) + 3;
                                    for (int i=0; i<rndnum; i++)
                                    {
                                        fruit = firstFruit;
                                        bitmapNode = firstBitmap;
                                        fruitString = firstFruitString;
                                        fruit2 = firstFruit2;
                                        createNewBitmaps();
                                    }
                                }
                                count2 = count2 + time + 20;
                            }
                            /*if (count >= 14000)
                            {
                                if (count > count2+rndnum && count < count2+rndnum+20)
                                {
                                    fruit = firstFruit;
                                    bitmapNode = firstBitmap;
                                    fruitString = firstFruitString;
                                    fruit2 = firstFruit2;
                                    createNewBitmaps();
                                }
                                if (count > count2+rndnum+20 && count < count2+rndnum+40)
                                {
                                    count2 = count2 + rndnum + 40;
                                    rndnum = rnd.nextInt((1500-700)+1)+700;
                                }
                            }*/
                            fruit = firstFruit;
                            bitmapNode = firstBitmap;
                            fruitString = firstFruitString;
                            fruit2 = firstFruit2;
                            for (int i=0; i<firstFruit.getLength(firstFruit); i++)
                            {
                                c.drawBitmap(bitmapNode.GetValue(), fruit.GetValue().getX(),
                                        fruit.GetValue().getY(),null);

                                if (fruit.GetValue().sliced == true)
                                {
                                    c.drawBitmap(returnHalfBitmap2(fruitString), fruit2.GetValue().getX(),
                                            fruit2.GetValue().getY(),null);
                                }

                                bitmapNode = bitmapNode.GetNext();
                                fruit = fruit.GetNext();
                                fruitString = fruitString.GetNext();
                                fruit2 = fruit2.GetNext();
                            }
                            fruit = firstFruit;
                            bitmapNode = firstBitmap;
                            fruitString = firstFruitString;
                            fruit2 = firstFruit2;
                            automaticMove(c);
                        }
                    }
                    Thread.sleep(interval);
                }
                catch (Exception e)
                {

                }
                finally {
                    if(c!=null)
                    {
                        this.getHolder().unlockCanvasAndPost(c);
                    }
                }
            }
        }
    }


-------------------------------------------------------------------
Node class:
   package com.example.fruitninja;

   public class NodeClass
   {
       private Object data;
       private NodeClass next;

       public NodeClass(Object data)
       {
           this.data = data;
           next = null;
       }

       public Object getData(){
           return this.data;
       }

       public void setData(Object data){
           this.data = data;
       }

       public NodeClass getNext(){
           return this.next;
       }

       public void setNext(NodeClass next){
           this.next = next;
       }

   }

---------------------------------------------------------------------------
LinkedList Class:
    package com.example.fruitninja;

    import android.graphics.Bitmap;

    import org.w3c.dom.Node;

    public class LinkedList
    {
        Node head;

        static class Node
        {
            Bitmap bitmap;
            Node next;

            Node(Bitmap d)
            {
                bitmap = d;
                next = null;
            }

            public static LinkedList insert(LinkedList list, Bitmap bitmap)
            {
                Node new_node = new Node(bitmap);
                new_node.next = null;
                if (list.head == null){
                    list.head = new_node;
                }
                else {
                    Node last = list.head;
                    while (last.next != null)
                    {
                        last = last.next;
                    }
                    last.next = new_node;
                }
                return list;
            }

        }
    }

------------------------------------------------------------------------------------------
Start():
        startX = rnd.nextInt((1500 - 500) + 1) + 500;
        startY = 850;
        maxY = 850 - (600 + rnd.nextInt(150));
        midX = startX - halfLength;
        halfLength = rnd.nextInt(500);
        x = startX;
        y = startY;
      -------------------------------------------------------------
            if (n == 0)
            {
                startX = 1500;
                startY = 800;
                dx = 10;
                dy = 80;
                //dy = rnd.nextInt((750 - 50) + 1) + 50;
                maxY = 200;
                x = startX;
                y = startY;
            }
            if (n == 1)
            {
                startX = rnd.nextInt((1500 - 500) + 1) + 500;
                startY = 900;
                dx = 10;
                dy = rnd.nextInt((750 - 50) + 1) + 50;
                maxY = rnd.nextInt((300 - 100) + 1) + 100;
                x = startX;
                y = startY;
            }
            if (n == 3)
            {
                startX = rnd.nextInt((1500 - 500) + 1) + 500;
                startY = 900;
                dx = 10;
                dy = rnd.nextInt((750 - 50) + 1) + 50;
                maxY = rnd.nextInt((300 - 100) + 1) + 100;
                x = startX;
                y = startY;
            }
            if (n == 4)
            {
                startX = rnd.nextInt((1500 - 500) + 1) + 500;
                startY = 900;
                dx = 10;
                dy = rnd.nextInt((750 - 50) + 1) + 50;
                maxY = rnd.nextInt((300 - 100) + 1) + 100;
                x = startX;
                y = startY;
            }
------------------------------------------------------------------------------------------
DrawSurfaceView():
        if (n == 0)
            bitmap1 = BitmapFactory.decodeResource(getResources(), wm3);
        if (n == 1)
            bitmap1 = BitmapFactory.decodeResource(getResources(), orange3);
        if (n == 2)
            bitmap1 = BitmapFactory.decodeResource(getResources(), banana2);
        if (n == 3)
            bitmap1 = BitmapFactory.decodeResource(getResources(), apple3);
      -------------------------------------------------------------
      bitmap1 = BitmapFactory.decodeResource(getResources(), wm3);
      bitmap2 = BitmapFactory.decodeResource(getResources(), orange3);
      bitmap3 = BitmapFactory.decodeResource(getResources(), banana2);
      bitmap4 = BitmapFactory.decodeResource(getResources(), apple3);
      bitmaps = new Bitmap[]{bitmap1, bitmap2, bitmap3, bitmap4};
------------------------------------------------------------------------------------------
public void automaticMove()
    {
        /*
        if (startX > 1000)
            x = x - 30;
        if (startX < 1000)
            x = x + 30;
        if (startX == 1000)
            x = startX;
        y = (maxY)/((halfLength)*(halfLength)) * ((x-midX)*(x-midX)) + (maxY);

        if (y > 900)
            stopAutomaticMove();
         */
        /*
        if (startX > 1000)
            x = x - dx;
        if (startX < 1000)
            x = x + dx;
        if (startX == 1000)
            x = startX;
         */
        x = x - dx;
        dx = dx + 10;

        if (start == true)
        {
            if (y > maxY)
                y = y - dy;
            if (y <= maxY){
                start = false;
            }
        } else {
            y = y + dy;
        }

        if (y >= startY && start == false)
            stopAutomaticMove();
    }
------------------------------------------------------------------------------------------